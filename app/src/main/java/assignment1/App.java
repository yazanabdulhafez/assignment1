/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package assignment1;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class App {
  public static List<User> userList;


    public static void main(String[] args) {
        userList=new ArrayList<>();
        userList.add(new User(134,"HIMA","529853225","hima@gmail.com",963258));
        userList.add(new User(135,"KIYO","544852122","kiyo@gmail.com",100856));
        userList.add(new User(136,"MOLU","962355569","molu@gmail.com",100896));
        userList.add(new User(137,"GEENA","544002122","geena@gmailcom",800965));
        userList.add(new User(138,"MENA","563252144","menagmail.com",104582));
        userList.add(new User(136,"MOLU","962355569","molu@gmail.com",100896));
        System.out.println("*****************************");
            printUsersNames();
        System.out.println("*****************************");
            printNameMobileEmail(104582);
        System.out.println("*****************************");
            printUsersWithVaildEmail();
        System.out.println("*****************************");
            printUsersAlphabeticalOrder();
        System.out.println("*****************************");
           printDuplicatedUsers();
        System.out.println("*****************************");
           sortPrintWithNoDuplication();
    }

    /* Sort and Print the users based on Customer Reference Number */
    public static void printUsersNames(){
        try {
            userList.sort(new UserComparator());
            for (User el : userList) {
                System.out.println(el.getName());
            }
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }



    /*  With Customer Reference Number as input; Print Name, Mobile & Email */
    public static void printNameMobileEmail(long referenceNum){

     try{
        for(User user:userList){
         if(user.getCoustomer_refrence()==referenceNum){
             System.out.println(user.getName());
             System.out.println(user.getMobile());
             System.out.println(user.getEmail());
         }
     }
    }catch(Exception e){
        System.out.println(e.getMessage());
    }
    }

    /* Print Users with valid Email ID */
    public static void printUsersWithVaildEmail(){
        try {
        for(User user:userList){
            if(isValidEmail(user.getEmail())){
                System.out.println(user.getName());
            }
        }
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }

    /* check if the email is valid using regex */
    public static boolean isValidEmail(String email) {
        if (email != null) {
            Pattern p = Pattern.compile("^[A-Za-z].*?@gmail\\.com$");
            Matcher m = p.matcher(email);
            return m.find();
        }
        return false;
    }

    /* Print Users in alphabetical order */
   public  static void printUsersAlphabeticalOrder(){
       try{
       userList.sort(new sortComparator());
       for (User el:userList){
           System.out.println(el.getName());
       }
       }catch(Exception e){
           System.out.println(e.getMessage());
       }
   }


    /* find the duplicated users using hashmap */
    public static  void printDuplicatedUsers(){
        Map<String,Integer> str=new HashMap<>();

        try {
        for(User user:userList){
            if(str.containsKey(user.getName())){
              str.put(user.getName(), str.get(user.getName())+1);
                System.out.println(user.getName());
            }else{
                str.put(user.getName(),1);
            }
        }
        }catch(Exception e){
            System.out.println(e.getMessage());
        }

    }

/* sort the list in alphabetical order and Print Users removing duplication */
    public static void sortPrintWithNoDuplication(){

        Map<String,Integer> str=new HashMap<>();
        List<User> result=new ArrayList<>();
        try {
        for(User user:userList){
            if(str.containsKey(user.getName())){
                str.put(user.getName(), str.get(user.getName())+1);
            }else{
                str.put(user.getName(),1);
                result.add(user);
            }
        }

        result.sort(new sortComparator());
        for (User el:result){
            System.out.println(el.getName());
        }
        }catch(Exception e){
            System.out.println(e.getMessage());
        }


    }



}

/* Sort and Print the users based on Customer Reference Number */
class UserComparator implements Comparator<User> {

    @Override
    public int compare(User user1, User user2) {
        if (Math.abs(user1.getCoustomer_refrence() - user2.getCoustomer_refrence()) > 0) {
            return user1.getCoustomer_refrence() < user2.getCoustomer_refrence() ? -1 : 1; // ascending
        } else {
            return user1.getId() - user2.getId();
        }
    }
}

/*Print Users in alphabetical order.*/
class sortComparator implements Comparator<User> {

    @Override
    public int compare(User user1, User user2) {
        if (!user1.getName().equals(user2.getName()) ) {
            return user1.getName().compareTo(user2.getName());
        } else {
            return user1.getCoustomer_refrence() < user2.getCoustomer_refrence() ? -1 : 1; // ascending
        }
    }
}

